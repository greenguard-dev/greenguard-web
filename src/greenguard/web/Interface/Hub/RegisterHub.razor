<h5>Register Hub</h5>
<form hx-post="/api/hub" hx-on:hub-added="ui('#add-hub')">
    <div>
        <div class="tabs">
            <a class="active" data-ui="#device-tab">
                <i>settings_remote</i>
                <span>Device</span>
            </a>
            <a data-ui="#firmware-tab">
                <i>memory</i>
                <span>Firmware</span>
            </a>
        </div>
        <div id="device-tab" class="page vertical-padding active">
            <div class="s12 grid vertical-padding">
                <div class="s12">
                    <div class="s12 field label border no-margin">
                        <input type="text" name="name" value="@_plantName">
                        <label>Name</label>
                    </div>
                </div>
                <div class="s12">
                    <div class="field label border no-margin">
                        <select name="deviceId">
                            <option value="0">XIAO ESP32C6</option>
                            <option value="1">XIAO ESP32C3</option>
                        </select>
                        <label>Device ID</label>
                    </div>
                </div>
            </div>
        </div>
        <div id="firmware-tab" class="page vertical-padding">
            <div class="s12 grid vertical-padding">
                <div class="s12">
                    <div class="field label border no-margin">
                        <input type="text" name="endpoint" value="@_currentAddress">
                        <label>greenguard URL</label>
                    </div>
                </div>
                <pre class="s12">For greenguard instances hosted under https, the CA root certificate must be embedded in the firmware. The certificate is determined accordingly by greenguard. Make sure that your reverse proxy sets the corresponding forwarded-proto headers. This step is skipped for local installations.</pre>
                <div class="s12">
                    <div class="field label border no-margin">
                        <input type="text" name="ssid">
                        <label>WiFi SSID</label>
                    </div>
                </div>
                <div class="s12">
                    <div class="s12 field label border no-margin">
                        <input type="password" name="password">
                        <label>WiFi Password</label>
                    </div>
                </div>
                <pre class="s12">The SSID and password of the access point are not saved in greenguard. They are only made available to the hub via the flasher.</pre>
                <nav class="s12 right-align">
                    <button class="fill" type="button">Download firmware configuration</button>
                </nav>
            </div>
        </div>
    </div>
    <nav class="right-align">
        <button class="" type="submit">Register</button>
        <button class="fill" type="button" data-ui="#add-hub">Close</button>
    </nav>
</form>

@code {
    [Inject] public IHttpContextAccessor HttpContextAccessor { get; set; }
    
    private string? _currentAddress = null;
    private string _plantName = string.Empty;

    private static string[] _plantNames =
    [
        "Lysandra", "Thalia", "Zinnia", "Amaranth", "Saphira", "Calyx", "Thornis", "Petalyn", "Solara", "Virella",
        "Acantha", "Lavendra", "Iriska", "Elowen", "Flora", "Orion", "Celestia", "Lumo", "Zephyr", "Nimbus",
        "Solace", "Vega", "Astra", "Mira", "Ceres", "Sylphix", "Aqualis", "Florion", "Verdant", "Beryl",
        "Sylva", "Vella", "Nova", "Fauna", "Elara", "Quilla", "Vaera", "Talia", "Aria", "Cassia", "Lyra",
        "Irina", "Vega", "Fira", "Thalix", "Elysia", "Nysa", "Saphir", "Helia", "Calia"
    ];
    
        
    protected override async Task OnInitializedAsync()
    {
        var random = new Random();
        var firstNameIndex = random.Next(0, _plantNames.Length);
        var secondNameIndex = random.Next(0, _plantNames.Length);

        while (firstNameIndex == secondNameIndex)
        {
            secondNameIndex = random.Next(0, _plantNames.Length);
        }

        _plantName = _plantNames[firstNameIndex] + " " + _plantNames[secondNameIndex];

        if (HttpContextAccessor.HttpContext == null) return;

        var isHttps = HttpContextAccessor.HttpContext.Request.IsHttps;

        if (isHttps)
        {
            _currentAddress = "https://" + HttpContextAccessor.HttpContext.Request.Host;
        }
        else
        {
            _currentAddress = "http://" + HttpContextAccessor.HttpContext.Request.Host;
        }
    }
}